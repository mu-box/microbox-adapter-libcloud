{
  "swagger": "2.0",
  "info": {
    "title": "Microbox Adapter: Microsoft Azure",
    "description": "An adapter for deploying Microbox apps to Microsoft Azure.",
    "contact": {
      "name": "Hennik Hunsaker",
      "email": "hennikhunsaker@microbox.cloud"
    },
    "license": {
      "name": "MIT",
      "url": "http://choosealicense.com/licenses/mit/"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Official documentation here",
    "url": "https://docs.microbox.cloud/providers/create/"
  },
  "basePath": "/azure_arm",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/meta": {
      "get": {
        "tags": [
          "meta"
        ],
        "summary": "Gathering Metadata",
        "description": "The `/meta` route is used to provide Microbox with various pieces of metadata that will be used for displaying information in the dashboard and for requesting authentication information from the users.",
        "externalDocs": {
          "description": "Official documentation here",
          "url": "https://docs.microbox.cloud/providers/create/#meta"
        },
        "operationId": "meta",
        "security": [{}],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/json": {
                "id": "do",
                "name": "Digital Ocean",
                "server_nick_name": "Droplet",
                "default_region": "sfo1",
                "default_size": "512mb",
                "default_plan": "standard",
                "can_reboot": true,
                "can_rename": true,
                "internal_iface": "eth1",
                "external_iface": "eth0",
                "ssh_user": "root",
                "ssh_auth_method": "key",
                "ssh_key_method": "reference",
                "bootstrap_script": "https://s3.amazonaws.com/tools.microbox.cloud/bootstrap/ubuntu.sh",
                "credential_fields": [{
                  "key": "access-token",
                  "label": "Access Token"
                }],
                "instructions": "<a href='//cloud.digitalocean.com/settings/api/tokens' target='_blank'>Create a Personal Access Token</a> in your Digital Ocean Account that has read/write access, then add the token here or view the <a href='//www.digitalocean.com/community/tutorials/how-to-use-the-digitalocean-api-v2#how-to-generate-a-personal-access-token' target='_blank'>full guide</a>"
              }
            },
            "schema": {
              "required": [
                "id",
                "name",
                "server_nick_name",
                "default_region",
                "default_size",
                "can_reboot",
                "can_rename",
                "internal_iface",
                "external_iface",
                "ssh_user",
                "ssh_auth_method",
                "ssh_key_method",
                "bootstrap_script",
                "credential_fields"
              ],
              "properties": {
                "id": {
                  "description": "some unique identifier",
                  "type": "string"
                },
                "name": {
                  "description": "display name used in the dashboard",
                  "type": "string"
                },
                "server_nick_name": {
                  "description": "what this provider calls their servers",
                  "type": "string"
                },
                "default_region": {
                  "description": "the default region to launch servers when not specified",
                  "type": "string"
                },
                "default_size": {
                  "description": "default server size to use when creating an app",
                  "type": "string"
                },
                "default_plan": {
                  "description": "the id of the default plan in which the default size is ordered",
                  "type": "string"
                },
                "can_reboot": {
                  "description": "boolean to determine if we can reboot the server through the api",
                  "type": "boolean"
                },
                "can_rename": {
                  "description": "boolean to determine if we can rename the server through the api",
                  "type": "boolean"
                },
                "internal_iface": {
                  "description": "Internal interface. e.g. eth1",
                  "type": "string"
                },
                "external_iface": {
                  "description": "External interface. e.g. eth0",
                  "type": "string"
                },
                "ssh_user": {
                  "description": "The ssh user Microbox can use for ssh access to bootstrap the server. e.g. root",
                  "type": "string"
                },
                "ssh_auth_method": {
                  "description": "will either be 'key' or 'password'. When set to 'key', Microbox will behave in accordance with the <code>ssh_key_method</code> value. When set to 'password', Microbox will use the install server key endpoint to install the SSH key manually via the adapter instead of passing it in the create server step.",
                  "type": "string",
                  "enum": [
                    "key",
                    "password"
                  ]
                },
                "ssh_key_method": {
                  "description": "will either be 'reference' or 'object'. When set to 'reference', Microbox will first create the SSH key in the user's provider account, then pass a reference to it when servers are created. When set to 'object', Microbox will pass the actual public SSH key that should be installed on the server.",
                  "type": "string",
                  "enum": [
                    "reference",
                    "object"
                  ]
                },
                "bootstrap_script": {
                  "description": "The script that should be used to bootstrap the server. e.g. https://s3.amazonaws.com/tools.microbox.cloud/bootstrap/ubuntu.sh",
                  "type": "string"
                },
                "credential_fields": {
                  "description": "array of hashes that includes field keys and labels necessary to authenticate with the provider",
                  "type": "array",
                  "items": {
                    "required": [
                      "key",
                      "label"
                    ],
                    "properties": {
                      "key": {
                        "description": "suffix for Auth- headers used to identify each auth field",
                        "type": "string"
                      },
                      "label": {
                        "description": "text to display to the user for each auth field",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "instructions": {
                  "description": "string that contains instructions for how to setup authentication with the provider",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        }
      }
    },
    "/catalog": {
      "get": {
        "tags": [
          "meta"
        ],
        "summary": "Requesting the Catalog",
        "description": "The `/catalog` route is used to provide Microbox with a catalog of server sizes and options, within the available geographic regions.",
        "externalDocs": {
          "description": "Official documentation here",
          "url": "https://docs.microbox.cloud/providers/create/#catalog"
        },
        "operationId": "catalog",
        "responses": {
          "200": {
            "description": "The response data should be a list (array) of regions. Each region should contain a list of plans. It is not necessary to have multiple regions, however the structure will be the same regardless. Additionally, your integration may only have one classification of server types, or you may have high-cpu, high-ram, or high-IO options. A plan is a grouping of server sizes within a classification.",
            "examples": {
              "application/json": [{
                "id": "sfo1",
                "name": "San Francisco 1",
                "plans": [{
                  "id": "standard",
                  "name": "Standard Configuration",
                  "specs": [{
                      "id": "512mb",
                      "ram": 512,
                      "cpu": 1,
                      "disk": 20,
                      "transfer": 1,
                      "dollars_per_hr": 0.00744,
                      "dollars_per_mo": 5
                    },
                    {
                      "id": "1gb",
                      "ram": 1024,
                      "cpu": 1,
                      "disk": 30,
                      "transfer": 2,
                      "dollars_per_hr": 0.01488,
                      "dollars_per_mo": 10
                    }
                  ]
                }]
              }]
            },
            "schema": {
              "description": "Each region in the catalog consists of the following",
              "type": "array",
              "items": {
                "required": [
                  "id",
                  "name",
                  "plans"
                ],
                "properties": {
                  "id": {
                    "description": "unique region identifier to be used when ordering a server",
                    "type": "string"
                  },
                  "name": {
                    "description": "the visual identifier for the customer",
                    "type": "string"
                  },
                  "plans": {
                    "description": "A grouping of server sizes within a classification. Each plan consists of the following",
                    "type": "array",
                    "items": {
                      "required": [
                        "id",
                        "name",
                        "specs"
                      ],
                      "properties": {
                        "id": {
                          "description": "unique plan identifier",
                          "type": "string"
                        },
                        "name": {
                          "description": "the classification of the server options within this plan. The name should indicate to the user what kinds of workloads these server options are ideal for. For instance: \"Standard\" or \"High CPU\"",
                          "type": "string"
                        },
                        "specs": {
                          "description": "the list of server options within this plan. Each spec should have the following fields",
                          "type": "array",
                          "items": {
                            "required": [
                              "id",
                              "ram",
                              "cpu",
                              "disk",
                              "transfer",
                              "dollars_per_hr",
                              "dollars_per_mo"
                            ],
                            "properties": {
                              "id": {
                                "description": "a unique identifier that will be used when ordering a server",
                                "type": "string"
                              },
                              "ram": {
                                "description": "a visual indication to the user informing the amount of RAM is provided",
                                "type": "integer"
                              },
                              "cpu": {
                                "description": "a visual indication to the user informing the amount of CPUs or CPU cores",
                                "type": "integer"
                              },
                              "disk": {
                                "description": "a visual indication to the user informing the amount or size of disk",
                                "type": "integer"
                              },
                              "transfer": {
                                "description": "a visual indication to the user informing the amount of data transfer allowed per month for this server",
                                "type": "integer"
                              },
                              "dollars_per_hr": {
                                "description": "a visual indication to the user informing the cost of running this server per hour",
                                "type": "number",
                                "format": "currency"
                              },
                              "dollars_per_mo": {
                                "description": "a visual indication to the user informing the cost of running this server per month",
                                "type": "number",
                                "format": "currency"
                              }
                            },
                            "type": "object"
                          }
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/verify": {
      "post": {
        "tags": [
          "meta"
        ],
        "summary": "Verify the account credentials",
        "description": "The `/verify` route is used to verify a user's account credentials. The `credential_fields` specified in the metadata will be provided in the dashboard and required to be filled before the user can use this provider. After the credentials are provided, Microbox will call this route to verify that the account credentials provided by the user are valid.",
        "externalDocs": {
          "description": "Official documentation here",
          "url": "https://docs.microbox.cloud/providers/create/#verify"
        },
        "operationId": "verify",
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "default": {
            "$ref": "#/responses/default"
          }
        }
      }
    },
    "/servers": {
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Order Server",
        "description": "The `/servers` route is how Microbox submits a request to order a new server. This route SHOULD NOT hold open the request until the server is ready. The request should return immediately once the order has been submitted with an identifier that Microbox can use to followup on the order status.",
        "externalDocs": {
          "description": "Official documentation here",
          "url": "https://docs.microbox.cloud/providers/create/#order-server"
        },
        "operationId": "order-server",
        "parameters": [{
          "name": "payload",
          "in": "body",
          "description": "Server creation data",
          "required": true,
          "schema": {
            "required": [
              "name",
              "region",
              "size"
            ],
            "properties": {
              "name": {
                "description": "Microbox-generated name used to identify the machine visually as ordered by Microbox",
                "type": "string"
              },
              "region": {
                "description": "the region wherein to launch the server, which will match the region `id` from the catalog",
                "type": "string"
              },
              "size": {
                "description": "the size of server to provision, which will match an `id` provided in the aforementioned catalog",
                "type": "string"
              },
              "ssh_key": {
                "description": "id of the SSH key created during the `/keys` request",
                "type": "string"
              }
            },
            "type": "object"
          }
        }],
        "responses": {
          "201": {
            "description": "successful operation",
            "examples": {
              "application/json": {
                "id": "provider-server-ID"
              }
            },
            "schema": {
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "description": "unique id of the server",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "default": {
            "$ref": "#/responses/default"
          }
        }
      }
    },
    "/servers/{id}": {
      "get": {
        "tags": [
          "servers"
        ],
        "summary": "Query Server",
        "description": "The `GET /servers/{id}` route is used by Microbox to query state about a previously ordered server. This state is used to inform Microbox when the server is ready to be provisioned and also how to connect to the server.",
        "externalDocs": {
          "description": "Official documentation here",
          "url": "https://docs.microbox.cloud/providers/create/#query-server"
        },
        "operationId": "query-server",
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "the server id",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "successful operation",
            "examples": {
              "application/json": {
                "id": "provider-server-ID",
                "status": "active",
                "name": "microbox.cloud-cool-app-do.1.1",
                "external_ip": "192.0.2.15",
                "internal_ip": "192.168.0.15"
              }
            },
            "schema": {
              "required": [
                "id",
                "status",
                "name",
                "external_ip",
                "internal_ip"
              ],
              "properties": {
                "id": {
                  "description": "the server id",
                  "type": "string"
                },
                "status": {
                  "description": "the status or availability of the server. (active indicates server is ready)",
                  "type": "string"
                },
                "name": {
                  "description": "name of the server",
                  "type": "string"
                },
                "external_ip": {
                  "description": "external or public IP of the server",
                  "type": "string"
                },
                "internal_ip": {
                  "description": "internal or private IP of the server",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "default": {
            "$ref": "#/responses/default"
          }
        }
      },
      "delete": {
        "tags": [
          "servers"
        ],
        "summary": "Cancel Server",
        "description": "The `DELETE /servers/{id}` route is used to cancel a server that was previously ordered via Microbox. This route SHOULD NOT hold open the request until the server is completely canceled. It should return immediately once the order to cancel has been submitted.",
        "externalDocs": {
          "description": "Official documentation here",
          "url": "https://docs.microbox.cloud/providers/create/#cancel-server"
        },
        "operationId": "cancel-server",
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "the server id",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "default": {
            "$ref": "#/responses/default"
          }
        }
      }
    },
    "/servers/{id}/reboot": {
      "patch": {
        "tags": [
          "servers"
        ],
        "summary": "Reboot Server",
        "description": "The `/servers/{id}/reboot` route is used to reboot a server that was previously ordered via Microbox. This route SHOULD NOT hold open the request until the server is completely rebooted. It should return immediately once the order to reboot has been submitted",
        "externalDocs": {
          "description": "Official documentation here",
          "url": "https://docs.microbox.cloud/providers/create/#reboot-server"
        },
        "operationId": "reboot-server",
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "the server id",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "default": {
            "$ref": "#/responses/default"
          }
        }
      }
    }
  },
  "definitions": {},
  "securityDefinitions": {
    "Auth-Subscription-Id": {
      "name": "Auth-Subscription-Id",
      "in": "header",
      "type": "apiKey"
    },
    "Auth-Tenant-Id": {
      "name": "Auth-Tenant-Id",
      "in": "header",
      "type": "apiKey"
    },
    "Auth-Application-Id": {
      "name": "Auth-Application-Id",
      "in": "header",
      "type": "apiKey"
    },
    "Auth-Authentication-Key": {
      "name": "Auth-Authentication-Key",
      "in": "header",
      "type": "apiKey"
    },
    "Auth-Cloud-Environment": {
      "name": "Auth-Cloud-Environment",
      "in": "header",
      "type": "apiKey"
    }
  },
  "security": [{
    "Auth-Subscription-Id": [],
    "Auth-Tenant-Id": [],
    "Auth-Application-Id": [],
    "Auth-Authentication-Key": [],
    "Auth-Cloud-Environment": []
  }],
  "responses": {
    "default": {
      "description": "Error",
      "schema": {
        "required": [
          "errors"
        ],
        "properties": {
          "errors": {
            "description": "On Failure: Should return a json body with an errors node and a non 2xx status code.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      }
    }
  },
  "tags": [{
      "name": "meta",
      "description": "Endpoints related to the provider"
    },
    {
      "name": "servers",
      "description": "Endpoints related to server management"
    }
  ]
}
